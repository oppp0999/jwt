역할에 맞추어 router, model, controller, request, response 파일로 분리

Redis GUI 프로그램인 Redily는 지금 시점에서 사용할 수 없는 프로그램입니다. P3X Redis로 스크린샷을 교체

JWT?
JWT(JSON Web Token, JWT)는 JSON 객체로서 당사자간 정보를 안전하게 전송하기 위한 컴팩트한 방법
JWT는 상태 비저장입니다. 즉, 불투명 토큰과 달리 데이터베이스(지속 계층)에 저장할 필요가 없습니다.
JWT의 서명은 한번 절대 해독되지 않으므로 토큰이 안전하게 보호되도록 합니다.
JWT는 일정 기간이 지나면 무효로 설정할 수 있습니다. 이것은 토큰이 탈취되었을 때 해커가 할 수 있는 피해를 최소화하는데 도움이 됩니다.

구성요소 -> JWT는 세 부분으로 구성

1. 헤더: 사용된 토큰 유형 및 서명 알고리즘. 토큰 유형은 "JWT"일 수 있고, 서명 알고리즘은 HMAC 또는 SHA256 등등.. 일 수 있습니다.
2. 페이로드: 클레임이 포함된 토큰의 두 번째 부분. 애플리케이션별 데이터(예: 사용자 ID, 사용자 이름), 토큰 만료 시간(exp), 발급자(iss), 제목(sub) 등이 포함됩니다.
3. 서명: 인코딩된 헤더, 인코딩된 페이로드 및 사용자가 제공한 비밀이 서명을 작성하는 데 사용됩니다.


키를 이용하여 서명을 하면 JWT를 안전하게 유지할 수 있습니다. 심지어 JWT가 디코딩된 경우에도 서명이 암호화된 상태로 유지됩니다. JWT를 만들 때 키가 노출되지 않아야 합니다.



토큰 타입 -> 특정 기간 후에 만료로 설정된다. 만료 기간이 다른 두 개의 토큰을 생성

1. 액세스 토큰 Access Token -> 인증이 필요한 요청에 액세스 토큰을 사용, 일반적으로 요청 헤더에 추가 -> 액세스 토큰 수명은 15분 정도로 짧을 것을 권장
(토큰이 탈취 되더라도 심각한 공격 방지할 수 있다.)
2. 리프래시 토큰 Refresh Token -> 일반적으로 7일 정도로 설정하며 액세스 토큰보다 유효기간이 김. -> 새로우 액세스를 생성하고 액세스 토큰을 다시 발급받는데 사용

어디에 JWT를 저장할까?
JWT를 HttpOnly 쿠키에 저장하는 것을 적극 권장
백엔드에서 생성된 쿠키를 프런트엔드로 보내는 동안, 클라이언트측 스크립트를 통해 쿠키를 표시하지 않도록 브라우저에 지시하는 HttpOnly 플래그가 쿠키를 따라 전송합니다.

--------------------------------------------------------------------------------------------------------------------------------------------------------
1. jwt-todo 폴더 생성
이후 go.mod 초기화 -> go mod init jwt-todo (golang으로 진행하기에 상관없긴함)

2. gin 설치 -> go get github.com/gin-gonic

3. main.go에 내용 추가
/login url을 통해서 자격 증명(credentials)을 가져와 데이터베이스와 조회한 후 유효한 경우 로그인 (MySQL이용)
이번 프로젝트에서는 api 메모리에 담은 샘플 사용자만 사용 즉 -> 사용자 객체를 생성하여 사용

4. 사용자 객체 생성

5. 로그인 요청 -> 사용자의 인증이 완료되면 로그인하여 JWT생성 -> 이러한 기능은 Login() 함수를 구현하여 사용
사용자의 요청을 받은 후에 user 구조체에 언마샬링
marshalling -> 결집하다 -> byte stream으로 변환 후 정돈
unmarshalling -> 변환된 byte stream을 다시 객체로 만드는 작업
입력 사용자를 메모리에 정의한 사용자와 비교 후 -> 데이터베이스에 사용자의 정보가 있는지 조회

6. CreateToken -> 로그인 함수가 길어지지 않기 위해서 JWT를 생성하는 로직을 create에 구현(JWT 생성할 때 userID는 클래스에 담김)
go get github.com/dgrijalva/jwt-go 를 패키지를 사용하여 createtoken 함수 사용
토큰은 유효는 exp로 15분으로 설정,
토큰 생성시 환경변수 ACCESS_SECRET에 담긴 값을 이용하여 JWT에 서명 -> ACCESS_SECRET은 코드에 노출되면 안된다.
(.env, .yml파일에 저장하는 것이 좋다.)

6.1 .env 파일
내부에는 예를 들어
MY_APP_PORT=8080
DB_HOST=mongo
DB_PORT=27017
ACCESS_SECRET=loveisblind 이런식으로 저정한다.
--------------------------------------------------------------------------------------------------------------------------------------------------------

문제점 -> 전송받은 사용자 정보를 비교한 후 로그인하여 JWT를 생성할 수 있지만 문제가 발생할 수 있다.
1. JWT 유효기간이 지나야만 무효화가 됨, 즉 로그인 한 후 즉시 로그아웃 불가능 (탈취되어 사용 가능)
-----> 해결방법
1. 데이터베이스에 JWT 메타데이터(토큰 두 개) 저장 후 로그아웃을 요청한다면 이를 기록하여 JWT를 무효화 시킬 수 있음
2. 액세스 토큰(access token)이 만료된 경우 리프레시 토큰(refresh token)을 사용하여 새 액세스 토큰을 생성하여 액세스 토큰이 만료가 되더라도 사용자가 다시 로그인 하지 않게 만들 수 있다.




